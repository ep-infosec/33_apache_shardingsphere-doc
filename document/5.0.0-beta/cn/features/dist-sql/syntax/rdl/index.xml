<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RDL 语法 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/</link>
    <description>Recent content in RDL 语法 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据源资源</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-resource/</guid>
      <description>定义 ADD RESOURCE dataSource [, dataSource] ... dataSource: dataSourceName(HOST=hostName,PORT=port,DB=dbName,USER=user [, PASSWORD=password]) DROP RESOURCE dataSourceName [, dataSourceName] ...  添加资源前请确认已经创建分布式数据库，并执行 use 命令成功选择一个数据库 确认增加的资源是可以正常连接的， 否则将不能添加成功 重复的 dataSourceName 不允许被添加 DROP RESOURCE 只会删除逻辑资源，不会删除真实的数据源 被规则引用的资源将无法被删除  示例 ADD RESOURCE resource_0 ( HOST=127.0.0.1, PORT=3306, DB=db0, USER=root, PASSWORD=root ),resource_1 ( HOST=127.0.0.1, PORT=3306, DB=db1, USER=root ); DROP RESOURCE resource_0, resource_1; </description>
    </item>
    
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-sharding-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-sharding-rule/</guid>
      <description>定义 Sharding Table Rule CREATE SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ... ALTER SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ... DROP SHARDING TABLE RULE tableName [, tableName] ... shardingTableRuleDefinition: tableName(resources [, shardingColumn] [, shardingAlgorithm] [, keyGenerateStrategy]) resources: RESOURCES(resourceName [, resourceName] ...)) shardingColumn: SHARDING_COLUMN=columnName shardingAlgorithm: TYPE(NAME=shardingAlgorithmType [, PROPERTIES([algorithmProperties] )] ) keyGenerateStrategy: GENERATED_KEY(COLUMN=columnName,strategyDefinition) strategyDefinition: TYPE(NAME=keyGenerateStrategyType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  RESOURCES 需使用 RDL 管理的数据源资源 shardingAlgorithmType 指定自动分片算法类型，请参考 自动分片算法 keyGenerateStrategyType 指定分布式主键生成策，请参考 分布式主键 重复的 tableName 将无法被创建  Sharding Binding Table Rule CREATE SHARDING BINDING TABLE RULES(bindTableRulesDefinition [, bindTableRulesDefinition] .</description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-readwrite-splitting-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-readwrite-splitting-rule/</guid>
      <description>定义 CREATE READWRITE_SPLITTING RULE readwriteSplittingRuleDefinition [, readwriteSplittingRuleDefinition] ... ALTER READWRITE_SPLITTING RULE readwriteSplittingRuleDefinition [, readwriteSplittingRuleDefinition] ... DROP READWRITE_SPLITTING RULE ruleName [, ruleName] ... readwriteSplittingRuleDefinition: ruleName ([staticReadwriteSplittingRuleDefinition | dynamicReadwriteSplittingRuleDefinition] [, loadBanlancerDefinition]) staticReadwriteSplittingRuleDefinition: WRITE_RESOURCE=writeResourceName, READ_RESOURCES(resourceName [, resourceName] ... ) dynamicReadwriteSplittingRuleDefinition: AUTO_AWARE_RESOURCE=resourceName loadBanlancerDefinition: TYPE(NAME=loadBanlancerType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  支持创建静态读写分离规则和动态读写分离规则 动态读写分离规则依赖于数据库发现规则 loadBanlancerType 指定负载均衡算法类型，请参考 负载均衡算法 重复的 ruleName 将无法被创建  示例 // Static CREATE READWRITE_SPLITTING RULE ms_group_0 ( WRITE_RESOURCE=write_ds, READ_RESOURCES(read_ds_0,read_ds_1), TYPE(NAME=random) ); // Dynamic CREATE READWRITE_SPLITTING RULE ms_group_1 ( AUTO_AWARE_RESOURCE=group_0, TYPE(NAME=random,PROPERTIES(read_weight=&amp;#39;2:1&amp;#39;)) ); ALTER READWRITE_SPLITTING RULE ms_group_1 ( WRITE_RESOURCE=write_ds, READ_RESOURCES(read_ds_0,read_ds_1,read_ds_2), TYPE(NAME=random,PROPERTIES(read_weight=&amp;#39;2:0&amp;#39;)) ); DROP READWRITE_SPLITTING RULE ms_group_1; </description>
    </item>
    
    <item>
      <title>数据加密</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-encrypt-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-encrypt-rule/</guid>
      <description>定义 CREATE ENCRYPT RULE encryptRuleDefinition [, encryptRuleDefinition] ... ALTER ENCRYPT RULE encryptRuleDefinition [, encryptRuleDefinition] ... DROP ENCRYPT RULE tableName [, tableName] ... encryptRuleDefinition: tableName(COLUMNS(columnDefinition [, columnDefinition] ...)) columnDefinition: (NAME=columnName [, PLAIN=plainColumnName] , CIPHER=cipherColumnName, encryptAlgorithm) encryptAlgorithm: TYPE(NAME=encryptAlgorithmType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  PLAIN 指定明文数据列，CIPHER 指定密文数据列 encryptAlgorithmType 指定加密算法类型，请参考 加密算法 重复的 tableName 将无法被创建  示例 CREATE ENCRYPT RULE t_encrypt ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=123456abc))), (NAME=order_id, CIPHER =order_cipher,TYPE(NAME=MD5)) )), t_encrypt_2 ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=123456abc))), (NAME=order_id, CIPHER=order_cipher,TYPE(NAME=MD5)) )); ALTER ENCRYPT RULE t_encrypt ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=123456abc))), (NAME=order_id,CIPHER=order_cipher,TYPE(NAME=MD5)) )); DROP ENCRYPT RULE t_encrypt,t_encrypt_2; </description>
    </item>
    
    <item>
      <title>数据库发现</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-db-discovery-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/dist-sql/syntax/rdl/rdl-db-discovery-rule/</guid>
      <description>定义 CREATE DB_DISCOVERY RULE databaseDiscoveryRuleDefinition [, databaseDiscoveryRuleDefinition] ... ALTER DB_DISCOVERY RULE databaseDiscoveryRuleDefinition [, databaseDiscoveryRuleDefinition] ... DROP DB_DISCOVERY RULE ruleName [, ruleName] ... databaseDiscoveryRuleDefinition: ruleName(resources, discoveryTypeDefinition) resources: RESOURCES(resourceName [, resourceName] ...) discoveryTypeDefinition: TYPE(NAME=discoveryType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  discoveryType 指定数据库发现服务类型，ShardingSphere 内置支持 MGR 重复的 ruleName 将无法被创建  示例 CREATE DB_DISCOVERY RULE ha_group_0 ( RESOURCES(resource_0,resource_1), TYPE(NAME=mgr,PROPERTIES(groupName=&amp;#39;92504d5b-6dec&amp;#39;,keepAliveCron=&amp;#39;&amp;#39;)) ); ALTER DB_DISCOVERY RULE ha_group_0 ( RESOURCES(resource_0,resource_1,resource_2), TYPE(NAME=mgr,PROPERTIES(groupName=&amp;#39;92504d5b-6dec&amp;#39; ,keepAliveCron=&amp;#39;&amp;#39;)) ); DROP DB_DISCOVERY RULE ha_group_0; </description>
    </item>
    
  </channel>
</rss>