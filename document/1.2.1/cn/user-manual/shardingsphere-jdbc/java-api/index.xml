<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java API on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/1.2.1/cn/user-manual/shardingsphere-jdbc/java-api/</link>
    <description>Recent content in Java API on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/1.2.1/cn/user-manual/shardingsphere-jdbc/java-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>模式配置</title>
      <link>https://shardingsphere.apache.org/document/1.2.1/cn/user-manual/shardingsphere-jdbc/java-api/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/1.2.1/cn/user-manual/shardingsphere-jdbc/java-api/mode/</guid>
      <description>配置入口 类名称：org.apache.shardingsphere.infra.config.mode.ModeConfiguration
可配置属性：
   名称 数据类型 说明 默认值     type String 运行模式类型
可选配置：Memory、Standalone、Cluster Memory   repository PersistRepositoryConfiguration 持久化仓库配置
Memory 类型无需持久化，可以为 null
Standalone 类型使用 StandalonePersistRepositoryConfiguration
Cluster 类型使用 ClusterPersistRepositoryConfiguration    overwrite boolean 是否使用本地配置覆盖持久化配置 false    Standalone 持久化配置 类名称：org.apache.shardingsphere.mode.repository.standalone.StandalonePersistRepositoryConfiguration
可配置属性：
   名称 数据类型 说明     type String 持久化仓库类型   props Properties 持久化仓库所需属性    Cluster 持久化配置 类名称：org.</description>
    </item>
    
    <item>
      <title>数据源配置</title>
      <link>https://shardingsphere.apache.org/document/1.2.1/cn/user-manual/shardingsphere-jdbc/java-api/data-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/1.2.1/cn/user-manual/shardingsphere-jdbc/java-api/data-source/</guid>
      <description>ShardingSphere-JDBC 支持所有的数据库 JDBC 驱动和连接池。
配置示例 示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
Map&amp;lt;String, DataSource&amp;gt; dataSourceMap = new HashMap&amp;lt;&amp;gt;(); // 配置第 1 个数据源 HikariDataSource dataSource1 = new HikariDataSource(); dataSource1.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); dataSource1.setJdbcUrl(&amp;#34;jdbc:mysql://localhost:3306/ds_1&amp;#34;); dataSource1.setUsername(&amp;#34;root&amp;#34;); dataSource1.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds_1&amp;#34;, dataSource1); // 配置第 2 个数据源 HikariDataSource dataSource2 = new HikariDataSource(); dataSource2.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); dataSource2.setJdbcUrl(&amp;#34;jdbc:mysql://localhost:3306/ds_2&amp;#34;); dataSource2.setUsername(&amp;#34;root&amp;#34;); dataSource2.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds_2&amp;#34;, dataSource2); // 配置其他数据源 ... </description>
    </item>
    
  </channel>
</rss>