<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>性能测试 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/test/performance-test/</link>
    <description>Recent content in 性能测试 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.1.2/cn/reference/test/performance-test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sysbench 性能测试</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/test/performance-test/performance-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/test/performance-test/performance-test/</guid>
      <description>目标 对 ShardingSphere-JDBC，ShardingSphere-Proxy 及 MySQL 进行性能对比。从业务角度考虑，在基本应用场景（单路由，主从+加密+分库分表，全路由）下，INSERT+UPDATE+DELETE 通常用作一个完整的关联操作，用于性能评估，而 SELECT 关注分片优化可用作性能评估的另一个操作；而主从模式下，可将 INSERT+SELECT+DELETE 作为一组评估性能的关联操作。 为了更好的观察效果，设计在一定数据量的基础上，使用 jmeter 20 并发线程持续压测半小时，进行增删改查性能测试，且每台机器部署一个 MySQL 实例，而对比 MySQL 场景为单机单实例部署。
测试场景 单路由 在 1000 数据量的基础上分库分表，根据 id 分为 4 个库，部署在同一台机器上，根据 k 分为 1024 个表，查询操作路由到单库单表； 作为对比，MySQL 运行在 1000 数据量的基础上，使用 INSERT+UPDATE+DELETE 和单路由查询语句。
主从 基本主从场景，设置一主库一从库，部署在两台不同的机器上，在 10000 数据量的基础上，观察读写性能； 作为对比，MySQL 运行在10000数据量的基础上，使用 INSERT+SELECT+DELETE 语句。
主从+加密+分库分表 在 1000 数据量的基础上，根据 id 分为 4 个库，部署在四台不同的机器上，根据 k 分为 1024 个表，c 使用 aes 加密，pad 使用 md5 加密，查询操作路由到单库单表； 作为对比，MySQL 运行在 1000 数据量的基础上，使用 INSERT+UPDATE+DELETE 和单路由查询语句。</description>
    </item>
    
    <item>
      <title>BenchmarkSQL 性能测试</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/test/performance-test/benchmarksql-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/test/performance-test/benchmarksql-test/</guid>
      <description>测试方法 ShardingSphere Proxy 支持通过 BenchmarkSQL 5.0 进行 TPC-C 测试。 除本文说明的内容外，BenchmarkSQL 操作步骤按照原文档 HOW-TO-RUN.txt 即可。
测试工具微调 与单机数据库压测不同，分布式数据库解决方案难免在功能支持上有所取舍。使用 BenchmarkSQL 压测 ShardingSphere Proxy 建议进行如下调整。
移除外键与 extraHistID 修改 BenchmarkSQL 目录下 run/runDatabaseBuild.sh，文件第 17 行。
修改前：
AFTER_LOAD=&amp;#34;indexCreates foreignKeys extraHistID buildFinish&amp;#34; 修改后：
AFTER_LOAD=&amp;#34;indexCreates buildFinish&amp;#34; 压测环境或参数建议 注意：本节中提到的任何参数都不是绝对值，都需要根据实际测试结果进行调整或取舍。
建议使用 Java 17 运行 ShardingSphere 编译 ShardingSphere 可以使用 Java 8。
使用 Java 17 可以在默认情况下尽量提升 ShardingSphere 的性能。
ShardingSphere 数据分片建议 对 BenchmarkSQL 的数据分片，可以考虑以各个表中的 warehouse id 作为分片键。
其中一个表 bmsql_item 没有 warehouse id，数据量固定 10 万行：
 可以取 i_id 作为分片键。但可能会导致同一个 Proxy 连接同时持有多个不同数据源的连接。 或考虑不做分片，存在单个数据源内。可能会导致某一数据源压力较大。 或对 i_id 进行范围分片，例如 1-50000 分布在数据源 0、50001-100000 分布在数据源 1。  BenchmarkSQL 中有如下 SQL 涉及多表：</description>
    </item>
    
  </channel>
</rss>