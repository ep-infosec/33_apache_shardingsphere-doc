<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>使用手册 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/</link>
    <description>Recent content in 使用手册 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/sharding/</guid>
      <description>不使用Spring 引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 基于Java编码的规则配置 Sharding-JDBC的分库分表通过规则配置描述，以下例子是根据user_id取模分库, 且根据order_id取模分表的两库两表的配置。
// 配置真实数据源  Map&amp;lt;String, DataSource&amp;gt; dataSourceMap = new HashMap&amp;lt;&amp;gt;(); // 配置第一个数据源  BasicDataSource dataSource1 = new BasicDataSource(); dataSource1.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); dataSource1.setUrl(&amp;#34;jdbc:mysql://localhost:3306/ds0&amp;#34;); dataSource1.setUsername(&amp;#34;root&amp;#34;); dataSource1.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds0&amp;#34;, dataSource1); // 配置第二个数据源  BasicDataSource dataSource2 = new BasicDataSource(); dataSource2.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); dataSource2.setUrl(&amp;#34;jdbc:mysql://localhost:3306/ds1&amp;#34;); dataSource2.setUsername(&amp;#34;root&amp;#34;); dataSource2.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds1&amp;#34;, dataSource2); // 配置Order表规则  TableRuleConfiguration orderTableRuleConfig = new TableRuleConfiguration(&amp;#34;t_order&amp;#34;,&amp;#34;ds${0..1}.t_order${0..1}&amp;#34;); // 配置分库 + 分表策略  orderTableRuleConfig.setDatabaseShardingStrategyConfig(new InlineShardingStrategyConfiguration(&amp;#34;user_id&amp;#34;, &amp;#34;ds${user_id % 2}&amp;#34;)); orderTableRuleConfig.setTableShardingStrategyConfig(new InlineShardingStrategyConfiguration(&amp;#34;order_id&amp;#34;, &amp;#34;t_order${order_id % 2}&amp;#34;)); // 配置分片规则  ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration(); shardingRuleConfig.</description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/read-write-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/read-write-splitting/</guid>
      <description>不使用Spring 引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 基于Java编码的规则配置 // 配置真实数据源  Map&amp;lt;String, DataSource&amp;gt; dataSourceMap = new HashMap&amp;lt;&amp;gt;(); // 配置主库  BasicDataSource masterDataSource = new BasicDataSource(); masterDataSource.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); masterDataSource.setUrl(&amp;#34;jdbc:mysql://localhost:3306/ds_master&amp;#34;); masterDataSource.setUsername(&amp;#34;root&amp;#34;); masterDataSource.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds_master&amp;#34;, masterDataSource); // 配置第一个从库  BasicDataSource slaveDataSource1 = new BasicDataSource(); slaveDataSource1.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); slaveDataSource1.setUrl(&amp;#34;jdbc:mysql://localhost:3306/ds_slave0&amp;#34;); slaveDataSource1.setUsername(&amp;#34;root&amp;#34;); slaveDataSource1.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds_slave0&amp;#34;, slaveDataSource1); // 配置第二个从库  BasicDataSource slaveDataSource2 = new BasicDataSource(); slaveDataSource2.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); slaveDataSource2.setUrl(&amp;#34;jdbc:mysql://localhost:3306/ds_slave1&amp;#34;); slaveDataSource2.setUsername(&amp;#34;root&amp;#34;); slaveDataSource2.setPassword(&amp;#34;&amp;#34;); dataSourceMap.put(&amp;#34;ds_slave1&amp;#34;, slaveDataSource2); // 配置读写分离规则  MasterSlaveRuleConfiguration masterSlaveRuleConfig = new MasterSlaveRuleConfiguration(&amp;#34;ds_master_slave&amp;#34;, &amp;#34;ds_master&amp;#34;, Arrays.asList(&amp;#34;ds_slave0&amp;#34;, &amp;#34;ds_slave1&amp;#34;)); // 获取数据源对象  DataSource dataSource = MasterSlaveDataSourceFactory.</description>
    </item>
    
    <item>
      <title>强制路由</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/hint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/hint/</guid>
      <description>简介 ShardingSphere使用ThreadLocal管理分片键值进行Hint强制路由。可以通过编程的方式向HintManager中添加分片值，该分片值仅在当前线程内生效。 Hint方式主要使用场景：
1.分片字段不存在SQL中、数据库表结构中，而存在于外部业务逻辑。
2.强制在主库进行某些数据操作。
基于暗示(Hint)的数据分片 配置Hint分片算法 Hint分片算法需要用户实现org.apache.shardingsphere.api.sharding.hint.HintShardingAlgorithm接口。ShardingSphere在进行Routing时，如果发现LogicTable的TableRule采用了 Hint的分片算法，将会从HintManager中获取分片值进行路由操作。
参考配置如下：
shardingRule: tables: t_order: actualDataNodes: demo_ds_${0..1}.t_order_${0..1} databaseStrategy: hint: algorithmClassName: org.apache.shardingsphere.userAlgo.HintAlgorithm tableStrategy: hint: algorithmClassName: org.apache.shardingsphere.userAlgo.HintAlgorithm defaultTableStrategy: none: defaultKeyGenerator: type: SNOWFLAKE column: order_id props: sql.show: true 获取HintManager HintManager hintManager = HintManager.getInstance(); 添加分片键值  使用hintManager.addDatabaseShardingValue来添加数据源分片键值。 使用hintManager.addTableShardingValue来添加表分片键值。   分库不分表情况下，强制路由至某一个分库时，可使用hintManager.setDatabaseShardingValue方式添加分片。通过此方式添加分片键值后，将跳过SQL解析和改写阶段，从而提高整体执行效率。
 清除分片键值 分片键值保存在ThreadLocal中，所以需要在操作结束时调用hintManager.close()来清除ThreadLocal中的内容。
hintManager实现了AutoCloseable接口，可推荐使用try with resource自动关闭。
完整代码示例 // Sharding database and table with using hintManager.  String sql = &amp;#34;SELECT * FROM t_order&amp;#34;; try (HintManager hintManager = HintManager.</description>
    </item>
    
    <item>
      <title>编排治理</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/orchestration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/orchestration/</guid>
      <description>使用治理功能需要指定配置中心和注册中心。配置将全部存入配置中心，可以在每次启动时使用本地配置覆盖配置中心配置，也可以只通过配置中心读取配置。
不使用Spring 引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-orchestration&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--若使用zookeeper, 请加入下面Maven坐标--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-orchestration-reg-zookeeper-curator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 基于Java编码的规则配置 // 省略配置dataSourceMap以及shardingRuleConfig  // ...  // 配置注册中心  Properties properties = new Properties(); properties.setProperty(&amp;#34;overwrite&amp;#34;, overwrite); CenterConfiguration centerConfiguration = new CenterConfiguration(&amp;#34;zookeeper&amp;#34;, properties); centerConfiguration.setServerLists(&amp;#34;localhost:2181&amp;#34;); centerConfiguration.setNamespace(&amp;#34;sharding-sphere-orchestration&amp;#34;); centerConfiguration.setOrchestrationType(&amp;#34;registry_center,config_center&amp;#34;); // 配置治理  Map&amp;lt;String, CenterConfiguration&amp;gt; instanceConfigurationMap = new HashMap&amp;lt;String, CenterConfiguration&amp;gt;(); instanceConfigurationMap.put(&amp;#34;orchestration-sharding-data-source&amp;#34;, centerConfiguration); // 获取数据源对象  OrchestrationShardingDataSourceFactory.createDataSource( createDataSourceMap(), createShardingRuleConfig(), new HashMap&amp;lt;String, Object&amp;gt;(), new Properties(), new OrchestrationConfiguration(instanceConfigurationMap)); 基于Yaml的规则配置 或通过Yaml方式配置，与以上配置等价：
orchestration: orchestration_ds: orchestrationType: registry_center,config_center instanceType: zookeeper serverLists: localhost:2181 namespace: orchestration props: overwrite: true DataSource dataSource = YamlOrchestrationShardingDataSourceFactory.</description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/transaction/</guid>
      <description>不使用Spring 引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 使用XA事务时，需要引入此模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 使用BASE事务时，需要引入此模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-transaction-base-seata-at&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 基于Java编码方式使用分布式事务 TransactionTypeHolder.set(TransactionType.XA); // 支持TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE try (Connection connection = dataSource.getConnection()) { // dataSource的类型为ShardingDataSource  connection.setAutoCommit(false); PreparedStatement preparedStatement = connection.prepareStatement(&amp;#34;INSERT INTO t_order (user_id, status) VALUES (?, ?)&amp;#34;); preparedStatement.setObject(1, i); preparedStatement.setObject(2, &amp;#34;init&amp;#34;); preparedStatement.executeUpdate(); connection.commit(); } 使用Spring-namespace 引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-spring-namespace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 使用XA事务时，需要引入此模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.</description>
    </item>
    
    <item>
      <title>数据脱敏</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/manual/sharding-jdbc/usage/encrypt/</guid>
      <description>该章节主要介绍如何使用数据脱敏功能，如何进行相关配置。数据脱敏功能即可与数据分片功能共同使用，又可作为单独功能组件，独立使用。 与数据分片功能共同使用时，会创建ShardingDataSource；单独使用时，会创建EncryptDataSource来完成数据脱敏功能。
不使用Spring 引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-sphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 基于Java编码的规则配置 // 配置数据源  BasicDataSource dataSource = new BasicDataSource(); dataSource.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); dataSource.setUrl(&amp;#34;jdbc:mysql://127.0.0.1:3306/encrypt&amp;#34;); dataSource.setUsername(&amp;#34;root&amp;#34;); dataSource.setPassword(&amp;#34;&amp;#34;); // 配置脱敏规则  Properties props = new Properties(); props.setProperty(&amp;#34;aes.key.value&amp;#34;, &amp;#34;123456&amp;#34;); EncryptorRuleConfiguration encryptorConfig = new EncryptorRuleConfiguration(&amp;#34;AES&amp;#34;, props); EncryptColumnRuleConfiguration columnConfig = new EncryptColumnRuleConfiguration(&amp;#34;plain_pwd&amp;#34;, &amp;#34;cipher_pwd&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;aes&amp;#34;); EncryptTableRuleConfiguration tableConfig = new EncryptTableRuleConfiguration(Collections.singletonMap(&amp;#34;pwd&amp;#34;, columnConfig)); EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(); encryptRuleConfig.getEncryptors().put(&amp;#34;aes&amp;#34;, encryptorConfig); encryptRuleConfig.getTables().put(&amp;#34;t_encrypt&amp;#34;, tableConfig); // 获取数据源对象  DataSource dataSource = EncryptDataSourceFactory.createDataSource(dataSource, encryptRuleConfig, new Properties()); 基于Yaml的规则配置 或通过Yaml方式配置，与以上配置等价：</description>
    </item>
    
  </channel>
</rss>