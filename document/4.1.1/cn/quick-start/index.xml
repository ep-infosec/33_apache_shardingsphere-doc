<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>快速入门 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/</link>
    <description>Recent content in 快速入门 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sharding-JDBC</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/sharding-jdbc-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/sharding-jdbc-quick-start/</guid>
      <description>1. 引入maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 注意: 请将${latest.release.version}更改为实际的版本号。
2. 规则配置 Sharding-JDBC可以通过Java，YAML，Spring命名空间和Spring Boot Starter四种方式配置，开发者可根据场景选择适合的配置方式。详情请参见配置手册。
3. 创建DataSource 通过ShardingDataSourceFactory工厂和规则配置对象获取ShardingDataSource，ShardingDataSource实现自JDBC的标准接口DataSource。然后即可通过DataSource选择使用原生JDBC开发，或者使用JPA, MyBatis等ORM工具。
DataSource dataSource = ShardingDataSourceFactory.createDataSource(dataSourceMap, shardingRuleConfig, props); </description>
    </item>
    
    <item>
      <title>Sharding-Proxy</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/sharding-proxy-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/sharding-proxy-quick-start/</guid>
      <description>1. 规则配置 编辑%SHARDING_PROXY_HOME%\conf\config-xxx.yaml。详情请参见配置手册。
编辑%SHARDING_PROXY_HOME%\conf\server.yaml。详情请参见配置手册。
2. 引入依赖 如果后端连接PostgreSQL数据库，不需要引入额外依赖。
如果后端连接MySQL数据库，需要下载MySQL Connector/J， 解压缩后，将mysql-connector-java-5.1.47.jar拷贝到${sharding-proxy}\lib目录。
3. 启动服务  使用默认配置项  ${sharding-proxy}\bin\start.sh  配置端口  ${sharding-proxy}\bin\start.sh ${port} </description>
    </item>
    
    <item>
      <title>Sharding-Scaling(Alpha)</title>
      <link>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/sharding-scaling-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/4.1.1/cn/quick-start/sharding-scaling-quick-start/</guid>
      <description>快速开始 部署启动 1. 执行以下命令，编译生成sharding-scaling二进制包：  git clone https://github.com/apache/shardingsphere.git； cd shardingsphere; mvn clean install -Prelease; 发布包所在目录为：/sharding-distribution/sharding-scaling-distribution/target/apache-shardingsphere-${latest.release.version}-sharding-scaling-bin.tar.gz。
2. 解压缩发布包，修改配置文件conf/server.yaml，这里主要修改启动端口，保证不与本机其他端口冲突，其他值保持默认即可： port: 8888 blockQueueSize: 10000 pushTimeout: 1000 workerThread: 30 3. 启动sharding-scaling： sh bin/start.sh 注意： 如果后端连接MySQL数据库，需要下载MySQL Connector/J， 解压缩后，将mysql-connector-java-5.1.47.jar拷贝到${sharding-scaling}\lib目录。
4. 查看日志logs/stdout.log，确保启动成功。 创建迁移任务 Sharding-Scaling提供相应的HTTP接口来管理迁移任务，部署启动成功后，我们可以调用相应的接口来启动迁移任务。
创建迁移任务：
curl -X POST \ http://localhost:8888/shardingscaling/job/start \ -H &#39;content-type: application/json&#39; \ -d &#39;{ &amp;quot;ruleConfiguration&amp;quot;: { &amp;quot;sourceDatasource&amp;quot;: &amp;quot;ds_0: !!org.apache.shardingsphere.orchestration.core.configuration.YamlDataSourceConfiguration\n dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n properties:\n jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;amp;useSSL=false\n username: root\n password: &#39;\&#39;&#39;123456&#39;\&#39;&#39;\n connectionTimeout: 30000\n idleTimeout: 60000\n maxLifetime: 1800000\n maxPoolSize: 50\n minPoolSize: 1\n maintenanceIntervalMilliseconds: 30000\n readOnly: false\n&amp;quot;, &amp;quot;sourceRule&amp;quot;: &amp;quot;defaultDatabaseStrategy:\n inline:\n algorithmExpression: ds_${user_id % 2}\n shardingColumn: user_id\ntables:\n t1:\n actualDataNodes: ds_0.</description>
    </item>
    
  </channel>
</rss>