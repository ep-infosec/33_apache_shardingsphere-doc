<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01-starts on </title>
    <link>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/</link>
    <description>Recent content in 01-starts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Dec 2016 16:06:17 +0800</lastBuildDate>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>起航</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/</link>
      <pubDate>Fri, 02 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/</guid>
      <description> 本章导航  如果想快速体验Elastic-Job-Lite的强大功能，请阅读快速入门。 如果在使用中遇到什么问题，请首先在FAQ中寻找解决问题的答案。 想要在自己的项目中集成Elastic-Job-Lite,您一定很关心它如何开发及如何部署。  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/quick-start/</link>
      <pubDate>Thu, 06 Apr 2017 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/quick-start/</guid>
      <description>1. 使用API配置启动 引入maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.elasticjob&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  作业开发 public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  作业配置 // 定义作业核心配置 JobCoreConfiguration simpleCoreConfig = JobCoreConfiguration.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/faq/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/faq/</guid>
      <description>1. 阅读源码时为什么会出现编译错误? 回答：
Elastic-Job使用lombok实现极简代码。关于更多使用和安装细节，请参考lombok官网。
2. 使用Spring命名空间时在网上相应地址找不到xsd? 回答：
Spring命名空间使用规范并未强制要求将xsd文件部署至公网地址，因此我们并未将http://www.dangdang.com/schema/ddframe/reg/reg.xsd和http://www.dangdang.com/schema/ddframe/job/job.xsd部署至公网，但不影响正常使用。
elastic-job-lite-spring的jar包中META-INF\spring.schemas配置了xsd文件的位置：http://www.dangdang.com/schema/ddframe/reg/reg.xsd=META-INF/namespace/reg.xsd http://www.dangdang.com/schema/ddframe/job/job.xsd=META-INF/namespace/job.xsd，需确保jar包中该文件存在。
3. 为什么在代码或Spring配置文件中修改了作业配置，注册中心配置却没有更新? 回答：
Elastic-Job-Lite采用无中心化设计，若每个客户端的配置不一致，不做控制的话，最后一个启动的客户端配置将会成为注册中心的最终配置。
Elastic-Job-Lite提出了overwrite概念，可通过JobConfiguration或Spring命名空间配置。overwrite=true即允许客户端配置覆盖注册中心，反之则不允许。如果注册中心无相关作业的配置，则无论overwrite是否配置，客户端配置都将写入注册中心。
4. 怀疑Elastic-Job-Lite在分布式环境中有问题，但无法重现又不能在线上环境调试，应该怎么做? 回答：
分布式问题非常难于调试和重现，为此Elastic-Job-Lite提供了dump命令。
如果您怀疑某些场景出现问题，可参照dump文档将作业运行时信息发给我们、提交issue或发至QQ群讨论。我们已将IP等敏感信息过滤，dump出来的信息可在公网安全传输。
5. Elastic-Job有何使用限制? 回答：
 作业启动成功后修改作业名称视为新作业，原作业废弃。
 同一台作业服务器可以运行多个相同的作业实例，但每个作业实例必须使用不同的JobInstanceId，因为作业运行时是按照IP和JobInstanceId注册和管理的。JobInstanceId可在作业配置中设置。
 一旦有服务器波动，或者修改分片项，将会触发重新分片；触发重新分片将会导致运行中的流式处理的作业在执行完本次作业后不再继续执行，等待分片结束后再恢复正常。
 开启monitorExecution才能实现分布式作业幂等性（即不会在多个作业服务器运行同一个分片）的功能，但monitorExecution对短时间内执行的作业（如每5秒一触发）性能影响较大，建议关闭并自行实现幂等性。
  6. 是否支持动态添加作业? 回答：
动态添加作业这个概念每个人理解不尽相同。
elastic-job-lite为jar包，由开发或运维人员负责启动。启动时自动向注册中心注册作业信息并进行分布式协调，因此并不需要手工在注册中心填写作业信息。 但注册中心与作业部署机无从属关系，注册中心并不能控制将单点的作业分发至其他作业机，也无法将远程服务器未启动的作业启动。elastic-job-lite并不会包含ssh免密管理等功能。
elastic-job-cloud为mesos框架，由mesos负责作业启动和分发。 但需要将作业打包上传，并调用elastic-job-cloud提供的REST API写入注册中心。 打包上传属于部署系统的范畴elastic-job-cloud并未涉及。
综上所述，elastic-job已做了基本动态添加功能，但无法做到真正意义的完全自动化添加。
7. 使用Spring版本有何限制? 回答：
Elastic-Job的Spring版本支持从3.1.0.RELEASE至4的任何版本。Spring 5由于仅支持JDK 8及其以上版本，因此目前并不支持。Spring 3.1.0之前的版本对占位符的使用与目前不同，因此不再支持。Elastic-Job并未包含Spring的maven依赖，请自行添加您需要的版本。
8. Zookeeper版本不是3.4.6会有什么问题? 回答：
根据测试，使用3.3.6版本的Zookeeper在使用Curator 2.10.0的CuratorTransactionFinal的commit时会导致死锁。
9. Elastic-Job 2.0.5及之前版本的作业暂停(Pause)与作业失效(Disable)的区别是什么? 回答：
作业暂停和失效都会停止当前节点作业的运行。但作业暂停和恢复不会触发重分片，而作业失效和生效将触发重分片。
10. Elastic-Job 2.1.0版本支持单节点运行多个相同的作业实例，是否兼容原来的数据结构? 回答：
是的。新Elastic-Job Lite的数据结构和原有结构完全兼容。
11. 界面Console无法正常显示? 回答：</description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/dev-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/dev-guide/</guid>
      <description>0. 环境要求 a. Java 请使用JDK1.7及其以上版本。详情参见
b. Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
c. Maven 请使用Maven 3.0.4及其以上版本。详情参见
1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: .</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/deploy-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/lite-2.x/01-start/deploy-guide/</guid>
      <description> 应用部署  启动Elastic-Job-Lite指定注册中心的Zookeeper。
 运行包含Elastic-Job-Lite和业务代码的jar文件。不限于jar或war的启动方式。
  运维平台和RESTFul API部署(可选)  解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。
 打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
 访问RESTFul API方法同控制台。
 elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
  </description>
    </item>
    
  </channel>
</rss>