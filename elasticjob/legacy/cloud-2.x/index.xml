<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 06 Apr 2017 22:38:50 +0800</lastBuildDate>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>快速入门</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/quick-start/</link>
      <pubDate>Thu, 06 Apr 2017 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/quick-start/</guid>
      <description>引入maven依赖 &amp;lt;!-- 引入elastic-job-cloud执行器模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.elasticjob&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-cloud-executor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  作业开发 public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  Java启动方式 需定义Main方法并调用JobBootstrap.execute()，例子如下：
public class JobDemo { public static void main(final String[] args) { JobBootstrap.</description>
    </item>
    
    <item>
      <title>核心概念</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-concepts/</link>
      <pubDate>Mon, 20 Feb 2017 10:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-concepts/</guid>
      <description>本文介绍Elastic-Job-Cloud包含的一些核心概念。
Elastic-Job-Cloud-Scheduler Elastic-Job-Cloud-Scheduler表示基于Mesos的Framework，用于资源调度和应用分发，需要独立启动并提供服务。
作业APP 作业APP指作业打包部署后的应用，描述了作业启动需要用到的CPU、内存、启动脚本及应用下载路径等基本信息，每个APP可以包含一个或多个作业。
作业 作业即实际运行的具体任务，和Lite版本一样，包含Simple、Dataflow和Script共3种作业类型，在注册作业前必须先注册作业APP。
资源 资源指作业启动或运行需要用到的CPU、内存，配置在APP维度表示整个应用启动需要用的资源，配置在JOB维度表示每个作业运行需要的资源，JOB启动需要的资源为指定APP需要的资源与JOB需要资源的总和。</description>
    </item>
    
    <item>
      <title>简介</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/00-overview/intro/</link>
      <pubDate>Tue, 06 Dec 2016 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/00-overview/intro/</guid>
      <description>为何使用Elastic-Job-Cloud？ Elastic-Job-Cloud以私有云平台的方式提供集资源、调度以及分片为一体的全量级解决方案，依赖Mesos和Zookeeper。
基本概念 1. 分片 任务的分布式执行，需要将一个任务拆分为多个独立的任务项，然后由分布式的服务器分别执行某一个或几个分片项。
例如：有一个遍历数据库某张表的作业，现有2台服务器。为了快速的执行作业，那么每台服务器应执行作业的50%。 为满足此需求，可将作业分成2片，每台服务器执行1片。作业遍历数据的逻辑应为：服务器A遍历ID以奇数结尾的数据；服务器B遍历ID以偶数结尾的数据。 如果分成10片，则作业遍历数据的逻辑应为：每片分到的分片项应为ID%10，而服务器A被分配到分片项0,1,2,3,4；服务器B被分配到分片项5,6,7,8,9，直接的结果就是服务器A遍历ID以0-4结尾的数据；服务器B遍历ID以5-9结尾的数据。
2. 分片项与业务处理解耦 Elastic-Job并不直接提供数据处理的功能，框架只会将分片项分配至各个运行中的作业服务器，开发者需要自行处理分片项与真实数据的对应关系。
3. 个性化参数的适用场景 个性化参数即shardingItemParameter，可以和分片项匹配对应关系，用于将分片项的数字转换为更加可读的业务代码。
例如：按照地区水平拆分数据库，数据库A是北京的数据；数据库B是上海的数据；数据库C是广州的数据。 如果仅按照分片项配置，开发者需要了解0表示北京；1表示上海；2表示广州。 合理使用个性化参数可以让代码更可读，如果配置为0=北京,1=上海,2=广州，那么代码中直接使用北京，上海，广州的枚举值即可完成分片项和业务逻辑的对应关系。
核心理念 1. 分布式调度 Elastic-Job-Cloud采用Mesos Framework分片和协调作业调度。采用中心化调度实现难度小于Elastic-Job-Lite的无中心化调度，无需再考虑多线程并发的情况。
2. 作业高可用 Elastic-Job-Cloud由Mesos Framework负责作业高可用和分片。作业丢失会由Mesos Framework自动在另外的Agent上重新启动作业分片实例。
3. 弹性资源利用 Elastic-Job-Cloud分为2种作业运行模式：瞬时作业 和 常驻作业。
瞬时作业会在每一次作业执行完毕后立刻释放资源，保证利用现有资源错峰执行。资源分配和容器启动均占用一定时长，且作业执行时资源不一定充足，因此作业执行会有延迟。瞬时作业适用于间隔时间长，资源消耗多且对执行时间无严格要求的作业。
常驻作业无论在运行时还是等待运行时，均一直占用分配的资源，可节省过多容器启动和资源分配的开销，适用于间隔时间短，资源需求量稳定的作业。
整体架构图 快速入门 引入maven依赖 &amp;lt;!-- 引入elastic-job-cloud执行器模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.elasticjob&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-cloud-executor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  作业开发 public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: .</description>
    </item>
    
    <item>
      <title>目录结构说明</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/03-design/module/</link>
      <pubDate>Tue, 06 Dec 2016 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/03-design/module/</guid>
      <description>elastic-job ├──elastic-job-cloud cloud父模块，不应直接使用 ├ ├──elastic-job-cloud-executor 执行器模块，开发作业时需依赖该模块，可直接使用 ├ ├──elastic-job-cloud-scheduler 调度器模块，可直接使用 ├──elastic-job-example 使用示例 ├ ├──elastic-job-example-embed-zk 供示例使用的内嵌ZK模块 ├ ├──elastic-job-example-jobs 作业示例 ├ ├──elastic-job-example-cloud 基于Spring的使用示例 ├──elastic-job-doc markdown生成文档的项目，使用方无需关注 ├ ├──elastic-job-cloud-doc cloud相关文档  </description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/faq/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/faq/</guid>
      <description> 1. 阅读源码时为什么会出现编译错误? 回答：
Elastic-Job使用lombok实现极简代码。关于更多使用和安装细节，请参考lombok官网。
2. Elastic-Job-Cloud有何使用限制? 回答：
 作业启动成功后修改作业名称视为新作业，原作业废弃。  3. 是否支持动态添加作业? 回答：
动态添加作业这个概念每个人理解不尽相同。
elastic-job-cloud为mesos框架，由mesos负责作业启动和分发。 但需要将作业打包上传，并调用elastic-job-cloud提供的REST API写入注册中心。 打包上传属于部署系统的范畴elastic-job-cloud并未涉及。
elastic-job已做了基本动态添加功能，但无法做到真正意义的完全自动化添加。
4. 使用Spring版本有何限制? 回答：
Elastic-Job的Spring版本支持从3.1.0.RELEASE至4的任何版本。Spring 5由于仅支持JDK 8及其以上版本，因此目前并不支持。Spring 3.1.0之前的版本对占位符的使用与目前不同，因此不再支持。Elastic-Job并未包含Spring的maven依赖，请自行添加您需要的版本。
5. Zookeeper版本不是3.4.6会有什么问题? 回答：
根据测试，使用3.3.6版本的Zookeeper在使用Curator 2.10.0的CuratorTransactionFinal的commit时会导致死锁。
6. Elastic-Job 2.0.5版本使用Cloud需要注意哪些问题? 回答：
对于Elastic Job Cloud，原作业维度配置无法满足易用性和扩展性等需求，因此在elastic-job 2.0.5Cloud版本中增加了作业APP的概念，即作业打包部署后的应用，描述了作业启动需要用到的CPU、内存、启动脚本及应用下载路径等基本信息，每个APP可以包含一个或多个作业。
７. 添加任务后为什么任务一直在ready状态，而不开始执行? 回答：
任务在mesos有单独的agent可提供所需的资源时才会启动，否则会等待直到有足够的资源。
增加JOB APP API
 将作业打包部署后发布作业APP。
 作业APP配置参数cpuCount,memoryMB分别代表应用启动时需要用到的CPU及内存。
  调整JOB API
 新增作业时，必须先发布打包部署后的作业APP。
 作业配置参数cpuCount,memoryMB分别代表作业运行时需要用到的CPU及内存。
  </description>
    </item>
    
    <item>
      <title>贡献代码</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/00-overview/contribution/</link>
      <pubDate>Tue, 06 Dec 2016 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/00-overview/contribution/</guid>
      <description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。
报告bug 本章节介绍如何提交一个bug。
报告一个新bug之前  确定在最新版本中该bug存在。我们将不会持续维护所有的发布版本，所有的修改仅根据当前版本。 确认该bug是可以复现的。请尽量提供完整的重现步骤。 请确定这不是一个重复的bug。 查看Issue Page列表，搜索您要提交的bug是否已经被报告过。  如何提交一个有质量的bug 请在Issue Page页面中提交bug。
 使用一个清晰并有描述性的标题来定义bug。 详细的描述复现bug的步骤。包括您使用的SQL，配置情况，预计产生的结果，实际产生的结果。并附加详细的TRACE日志。 如果程序抛出异常，请附加完整的堆栈日志。 如有可能，请附上屏幕截图或动态的GIF图，这些图片能帮助演示整个问题的产生过程。 如果涉及性能问题，请附加上CPU，内存或网络磁盘IO的Profile截图。 说明适用的版本，只有release版本的bug才可以提交，并且应该是当前最新版本。 说明适用的操作系统，及其版本。 使用bug标签(Label)来标记这个issue。  以下是bug的Markdown模板，请按照该模板填写issue。
[问题简单描述] **问题复现步骤:** 1. [第一步] 2. [第二步] 3. [其他步骤...] **期望的表现:** [在这里描述期望的表现] **观察到的表现:** [在这里描述观察到的表现] **屏幕截图和动态GIF图** ![复现步骤的屏幕截图和动态GIF图](图片的url) **Elastic-Job版本:** [输入Elastic-Job的版本] **操作系统及版本:** [输入操作系统及版本]  提交功能增强建议 本章节介绍如何提交一个功能增强建议。
提交一个功能增强建议之前  请确定这不是一个重复的功能增强建议。 查看Issue Page列表，搜索您要提交的功能增强建议是否已经被提交过。  如何提交一个好的功能增强建议 请在Issue Page页面中提交功能增强建议。
 使用一个清晰并有描述性的标题来定义增强建议。 详细描述增强功能的行为模式。 解释说明为什么该功能是对大多数用户是有用的。新功能应该具有广泛的适用性。 如有可能，可以列出其他数据库中间已经具备的类似功能。商用与开源软件均可。 使用enhancement标签(Label)来标记这个issue。  以下是功能增强建议的Markdown模板，请按照该模板填写issue。
[简单的建议描述] **建议的新功能行为** [描述新功能应表现的行为模式] **为什么这个新功能是对大多数用户有用的** [解释这个功能为什么对大多数用户是有用的] [列出其他的数据库中间件是否包含该功能，且如何实现的]  贡献补丁(patch) 本章节向贡献者介绍开发规范、环境、示例和文档。</description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/dev-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/dev-guide/</guid>
      <description>0. 环境需求 Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见
Mesos 请使用Mesos 0.28.0及其以上版本。详情参见
1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: .</description>
    </item>
    
    <item>
      <title>未来线路规划</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/03-design/roadmap/</link>
      <pubDate>Tue, 06 Dec 2016 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/03-design/roadmap/</guid>
      <description> Core Unified Job Config API Core Config Type Config Root Config  Job Types Simple Dataflow Script Http  Event Trace Event Publisher Database Event Listener Other Event Listener  Unified Schedule API Unified Resource API  Elastic-Job-Cloud Transient Job High Availability Elastic scale in/out Failover Misfire Idempotency  Daemon Job High Availability Elastic scale in/out Failover Misfire Idempotency  Mesos Scheduler High Availability Reconcile Redis Based Queue Improvement Http Driver  Mesos Executor Executor Reuse Pool Progress Reporting Health Detection Log Redirect  Lifecycle Management Job Add/Remove Job Pause/Resume Job Disable/Enable Job Shutdown App Add/Remove App Disable/Enable Restful API Web Console  Job Dependency Listener Workflow DAG  Job Distribution Mesos Based Distribution Docker Based Distribution  Resources Management Resources Allocate Cross Data Center A/B Test  Spring Integrate Bean Injection   </description>
    </item>
    
    <item>
      <title>运维平台</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-web-console/</link>
      <pubDate>Sat, 07 Jan 2017 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-web-console/</guid>
      <description>运维平台内嵌于elastic-job-cloud-scheduler的jar包中, 无需额外启动WEB付服务器, 可通过修改配置文件中http_port参数来调整启动端口,默认端口为8899，访问地址为http://{your_scheduler_ip}:8899。
登录 提供两种账户，管理员及访客，管理员拥有全部操作权限，访客仅拥有察看权限。默认管理员用户名和密码是root/root，访客用户名和密码是guest/guest，可通过conf\auth.properties修改管理员及访客用户名及密码。
功能列表  作业APP管理（发布、修改、查看）
 作业管理（注册、修改、查看以及删除）
 作业状态查看（待运行、运行中、待失效转移）
 作业历史查看（运行轨迹、执行状态、历史dashboard）
  设计理念 运维平台采用纯静态HTML+JS方式与后台的RESTful API交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-restful-api/</link>
      <pubDate>Fri, 17 Feb 2017 14:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-restful-api/</guid>
      <description>Elastic-Job-Cloud提供APP发布及作业注册等RESTful API可通过curl操作。
发布作业应用 url：app
方法：POST
参数类型：application/json
参数列表：
   属性名 类型 是否必填 缺省值 描述     appName String 是  作业应用名称。为Elastic-Job-Cloud的作业应用唯一标识   appURL String 是  作业应用所在路径。必须是可以通过网络访问到的路径   cpuCount double 否 1 作业应用启动所需要的CPU数量   memoryMB double 否 128 作业应用启动所需要的内存MB   bootstrapScript String 是  启动脚本，如：bin\start.sh   appCacheEnable bool 否 true 每次执行作业时是否从缓存中读取应用。禁用则每次执行任务均从应用仓库下载应用至本地   eventTraceSamplingCount int 否 0 常驻作业事件采样率统计条数，默认不采样全部记录。为避免数据量过大，可对频繁调度的常驻作业配置采样率，即作业每执行N次，才会记录作业执行及追踪相关数据    curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;appName&amp;quot;:&amp;quot;foo_app&amp;quot;,&amp;quot;appURL&amp;quot;:&amp;quot;http://app_host:8080/foo-job.</description>
    </item>
    
    <item>
      <title>高可用</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/high-availability/</link>
      <pubDate>Mon, 15 Feb 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/high-availability/</guid>
      <description> 介绍 调度器的高可用是通过运行几个指向同一个ZooKeeper集群的Elastic-Job-Cloud-Scheduler实例来实现的。ZooKeeper用于在当前主Elastic-Job-Cloud-Scheduler实例失败的情况下执行领导者选举。通过至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于&amp;rdquo;待命&amp;rdquo;状态。当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。
配置 每个Elastic-Job-Cloud-Scheduler实例必须使用相同的ZooKeeper集群。 例如，如果Zookeeper的Quorum为zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elastic-job-cloud，则elastic-job-cloud-scheduler.properties中Zookeeper相关配置为：
# Elastic-Job-Cloud&#39;s zookeeper address zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181 # Elastic-Job-Cloud&#39;s zookeeper namespace zk_namespace=elastic-job-cloud  </description>
    </item>
    
    <item>
      <title>事件追踪</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/event-trace/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/event-trace/</guid>
      <description>Elastic-Job的Lite版和Cloud版都提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。
基于关系型数据库的事件追踪 通过配置开启，具体配置方式请参见部署指南中附录部分。
事件追踪的event_trace_rdb_url属性对应库自动创建JOB_EXECUTION_LOG和JOB_STATUS_TRACE_LOG两张表以及若干索引。
JOB_EXECUTION_LOG字段含义
   字段名称 字段类型 是否必填 描述     id VARCHAR(40) 是 主键   job_name VARCHAR(100) 是 作业名称   task_id VARCHAR(1000) 是 任务名称,每次作业运行生成新任务   hostname VARCHAR(255) 是 主机名称   ip VARCHAR(50) 是 主机IP   sharding_item INT 是 分片项   execution_source VARCHAR(20) 是 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER   failure_cause VARCHAR(2000) 否 执行失败原因   is_success BIT 是 是否执行成功   start_time TIMESTAMP 是 作业开始执行时间   complete_time TIMESTAMP 否 作业结束执行时间    JOB_EXECUTION_LOG记录每次作业的执行历史。分为两个步骤：</description>
    </item>
    
    <item>
      <title>本地运行模式</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/local-executor/</link>
      <pubDate>Mon, 05 Jun 2017 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/local-executor/</guid>
      <description> 在开发Elastic-Job-Cloud作业时，开发人员可以脱离Mesos环境，在本地运行和调试作业。可以利用本地运行模式充分的调试业务功能以及单元测试，完成之后再部署至Mesos集群。
本地运行作业无需安装Mesos环境。
配置 使用org.apache.shardingsphere.elasticjob.cloud.executor.local.LocalCloudJobConfiguration配置本地作业。
LocalCloudJobConfiguration config = new LocalCloudJobConfiguration( new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(&amp;quot;FooJob&amp;quot;, &amp;quot;*/2 * * * * ?&amp;quot;, 3) //1 .shardingItemParameters(&amp;quot;0=Beijing,1=Shanghai,2=Guangzhou&amp;quot;) .jobParameter(&amp;quot;dbName=dangdang&amp;quot;).build(), &amp;quot;com.xxx.foo.FooJob&amp;quot;), 1, //2 &amp;quot;testSimpleJob&amp;quot; , &amp;quot;applicationContext.xml&amp;quot;); //3   配置作业类型和作业基本信息。 配置当前运行的作业是第几个分片。 配置Spring相关参数。  运行 使用org.apache.shardingsphere.elasticjob.cloud.executor.local.LocalTaskExecutor运行作业。
new LocalTaskExecutor(localJobConfig).execute();  </description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/deploy-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/deploy-guide/</guid>
      <description> Scheduler部署步骤  启动Elastic-Job-Cloud-Scheduler和Mesos指定注册中心的Zookeeper。
 启动Mesos Master和Mesos Agent。
 解压elastic-job-cloud-scheduler-${version}.tar.gz。可通过源码mvn install编译获取。
 执行bin\start.sh脚本启动elastic-job-cloud-scheduler。
  作业部署步骤  确保Zookeeper, Mesos Master/Agent以及Elastic-Job-Cloud-Scheduler已启动。
 将打包之后的作业tar.gz文件放至网络可访问的位置，如：ftp或http。打包的tar.gz文件中Main方法需要调用Elastic-Job-Cloud提供的JobBootstrap.execute方法。
 使用curl命令调用REST API注册APP及作业，详情参见：RESTful API。
  附录  配置：修改conf\elastic-job-cloud-scheduler.properties文件。配置项说明如下：     属性名称 必填 默认值 描述     hostname 是  服务器真实的IP或hostname，不能是127.0.0.1或localhost   user 否  Mesos framework使用的用户名称   mesos_url 是 zk://127.0.0.1:2181/mesos Mesos所使用的Zookeeper地址   zk_servers 是 127.0.0.1:2181 Elastic-Job-Cloud所使用的Zookeeper地址   zk_namespace 否 elastic-job-cloud Elastic-Job-Cloud所使用的Zookeeper命名空间   zk_digest 否  Elastic-Job-Cloud所使用的Zookeeper登录凭证   http_port 是 8899 Restful API所使用的端口号   job_state_queue_size 是 10000 堆积作业最大值, 超过此阀值的堆积作业将直接丢弃。阀值过大可能会导致Zookeeper无响应，应根据实测情况调整   event_trace_rdb_driver 否  作业事件追踪数据库驱动   event_trace_rdb_url 否  作业事件追踪数据库URL   event_trace_rdb_username 否  作业事件追踪数据库用户名   event_trace_rdb_password 否  作业事件追踪数据库密码     停止：不提供停止脚本，可直接使用kill杀进程。  </description>
    </item>
    
    <item>
      <title>概览</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/00-overview/</link>
      <pubDate>Thu, 13 Apr 2017 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/00-overview/</guid>
      <description>概述 &amp;nbsp; &amp;nbsp; &amp;nbsp; 
Elastic-Job是一个分布式调度解决方案，由两个相互独立的子项目Elastic-Job-Lite和Elastic-Job-Cloud组成。
Elastic-Job-Cloud使用Mesos + Docker的解决方案，额外提供资源治理、应用分发以及进程隔离等服务。
   
功能列表  应用自动分发 基于Fenzo的弹性资源分配 分布式调度协调 弹性扩容缩容 失效转移 错过执行作业重触发 作业分片一致性，保证同一分片在分布式环境中仅一个执行实例 支持并行调度 支持作业生命周期操作 丰富的作业类型 Spring整合 运维平台 基于Docker的进程隔离(TBD)  第三方文档  2017-04 中国技术开放日分享：如何从0到1搭建弹性作业云Elastic-Job-Cloud
 2016-11 2016全球容器技术大会分享：基于Mesos的当当作业云Elastic-Job-Cloud
 2016-09 InfoQ新闻：基于Mesos的当当作业云Elastic Job Cloud
  交流与参与  报告确定的bug，提交增强功能建议和提交补丁等，请阅读如何进行贡献。  使用Elastic-Job的公司如果方便请留下公司+网址 https://github.com/elasticjob/elastic-job/issues/254</description>
    </item>
    
    <item>
      <title>使用指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/</link>
      <pubDate>Mon, 12 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/</guid>
      <description> 本章导航  想要了解Elastic-Job-Cloud是什么？请先了解这些核心概念
 Elastic-Job-Cloud提供了简单易用的运维平台，方便用户操作及查询作业。
 RESTful API介绍了如何通过RESTful API操作应用及作业。
 Elastic-Job-Cloud的Scheduler如何保证高可用？请阅读高可用。
 为了便于记录、查询、统计及监控作业运行情况，Elastic-Job提供了事件追踪功能。
 为了方便在开发机上调试，运行作业，Elastic-Job提供了本地运行作业功能。
  </description>
    </item>
    
    <item>
      <title>设计规划</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/03-design/</link>
      <pubDate>Mon, 12 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/03-design/</guid>
      <description> 本章导航  想了解模块设计，请阅读目录结构说明。
 Elastic-Job-Cloud未来规划有哪些呢？请阅读未来规划。
  </description>
    </item>
    
    <item>
      <title>起航</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/</link>
      <pubDate>Fri, 02 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/</guid>
      <description> 本章导航  如果想快速体验Elastic-Job-Cloud的强大功能，请阅读快速入门。 如果在使用中遇到什么问题，请首先在FAQ中寻找解决问题的答案。 想要在自己的项目中集成Elastic-Job-Cloud,您一定很关心它如何开发及如何部署。  </description>
    </item>
    
  </channel>
</rss>