<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02-guides on </title>
    <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/</link>
    <description>Recent content in 02-guides on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 12 Dec 2016 16:06:17 +0800</lastBuildDate>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/</link>
      <pubDate>Mon, 12 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/</guid>
      <description> 本章导航  想要了解Elastic-Job-Cloud是什么？请先了解这些核心概念
 Elastic-Job-Cloud提供了简单易用的运维平台，方便用户操作及查询作业。
 RESTful API介绍了如何通过RESTful API操作应用及作业。
 Elastic-Job-Cloud的Scheduler如何保证高可用？请阅读高可用。
 为了便于记录、查询、统计及监控作业运行情况，Elastic-Job提供了事件追踪功能。
 为了方便在开发机上调试，运行作业，Elastic-Job提供了本地运行作业功能。
  </description>
    </item>
    
    <item>
      <title>核心概念</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-concepts/</link>
      <pubDate>Mon, 20 Feb 2017 10:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-concepts/</guid>
      <description>本文介绍Elastic-Job-Cloud包含的一些核心概念。
Elastic-Job-Cloud-Scheduler Elastic-Job-Cloud-Scheduler表示基于Mesos的Framework，用于资源调度和应用分发，需要独立启动并提供服务。
作业APP 作业APP指作业打包部署后的应用，描述了作业启动需要用到的CPU、内存、启动脚本及应用下载路径等基本信息，每个APP可以包含一个或多个作业。
作业 作业即实际运行的具体任务，和Lite版本一样，包含Simple、Dataflow和Script共3种作业类型，在注册作业前必须先注册作业APP。
资源 资源指作业启动或运行需要用到的CPU、内存，配置在APP维度表示整个应用启动需要用的资源，配置在JOB维度表示每个作业运行需要的资源，JOB启动需要的资源为指定APP需要的资源与JOB需要资源的总和。</description>
    </item>
    
    <item>
      <title>运维平台</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-web-console/</link>
      <pubDate>Sat, 07 Jan 2017 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-web-console/</guid>
      <description>运维平台内嵌于elastic-job-cloud-scheduler的jar包中, 无需额外启动WEB付服务器, 可通过修改配置文件中http_port参数来调整启动端口,默认端口为8899，访问地址为http://{your_scheduler_ip}:8899。
登录 提供两种账户，管理员及访客，管理员拥有全部操作权限，访客仅拥有察看权限。默认管理员用户名和密码是root/root，访客用户名和密码是guest/guest，可通过conf\auth.properties修改管理员及访客用户名及密码。
功能列表  作业APP管理（发布、修改、查看）
 作业管理（注册、修改、查看以及删除）
 作业状态查看（待运行、运行中、待失效转移）
 作业历史查看（运行轨迹、执行状态、历史dashboard）
  设计理念 运维平台采用纯静态HTML+JS方式与后台的RESTful API交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-restful-api/</link>
      <pubDate>Fri, 17 Feb 2017 14:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/cloud-restful-api/</guid>
      <description>Elastic-Job-Cloud提供APP发布及作业注册等RESTful API可通过curl操作。
发布作业应用 url：app
方法：POST
参数类型：application/json
参数列表：
   属性名 类型 是否必填 缺省值 描述     appName String 是  作业应用名称。为Elastic-Job-Cloud的作业应用唯一标识   appURL String 是  作业应用所在路径。必须是可以通过网络访问到的路径   cpuCount double 否 1 作业应用启动所需要的CPU数量   memoryMB double 否 128 作业应用启动所需要的内存MB   bootstrapScript String 是  启动脚本，如：bin\start.sh   appCacheEnable bool 否 true 每次执行作业时是否从缓存中读取应用。禁用则每次执行任务均从应用仓库下载应用至本地   eventTraceSamplingCount int 否 0 常驻作业事件采样率统计条数，默认不采样全部记录。为避免数据量过大，可对频繁调度的常驻作业配置采样率，即作业每执行N次，才会记录作业执行及追踪相关数据    curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;appName&amp;quot;:&amp;quot;foo_app&amp;quot;,&amp;quot;appURL&amp;quot;:&amp;quot;http://app_host:8080/foo-job.</description>
    </item>
    
    <item>
      <title>高可用</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/high-availability/</link>
      <pubDate>Mon, 15 Feb 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/high-availability/</guid>
      <description> 介绍 调度器的高可用是通过运行几个指向同一个ZooKeeper集群的Elastic-Job-Cloud-Scheduler实例来实现的。ZooKeeper用于在当前主Elastic-Job-Cloud-Scheduler实例失败的情况下执行领导者选举。通过至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于&amp;rdquo;待命&amp;rdquo;状态。当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。
配置 每个Elastic-Job-Cloud-Scheduler实例必须使用相同的ZooKeeper集群。 例如，如果Zookeeper的Quorum为zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elastic-job-cloud，则elastic-job-cloud-scheduler.properties中Zookeeper相关配置为：
# Elastic-Job-Cloud&#39;s zookeeper address zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181 # Elastic-Job-Cloud&#39;s zookeeper namespace zk_namespace=elastic-job-cloud  </description>
    </item>
    
    <item>
      <title>事件追踪</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/event-trace/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/event-trace/</guid>
      <description>Elastic-Job的Lite版和Cloud版都提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。
基于关系型数据库的事件追踪 通过配置开启，具体配置方式请参见部署指南中附录部分。
事件追踪的event_trace_rdb_url属性对应库自动创建JOB_EXECUTION_LOG和JOB_STATUS_TRACE_LOG两张表以及若干索引。
JOB_EXECUTION_LOG字段含义
   字段名称 字段类型 是否必填 描述     id VARCHAR(40) 是 主键   job_name VARCHAR(100) 是 作业名称   task_id VARCHAR(1000) 是 任务名称,每次作业运行生成新任务   hostname VARCHAR(255) 是 主机名称   ip VARCHAR(50) 是 主机IP   sharding_item INT 是 分片项   execution_source VARCHAR(20) 是 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER   failure_cause VARCHAR(2000) 否 执行失败原因   is_success BIT 是 是否执行成功   start_time TIMESTAMP 是 作业开始执行时间   complete_time TIMESTAMP 否 作业结束执行时间    JOB_EXECUTION_LOG记录每次作业的执行历史。分为两个步骤：</description>
    </item>
    
    <item>
      <title>本地运行模式</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/local-executor/</link>
      <pubDate>Mon, 05 Jun 2017 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/02-guide/local-executor/</guid>
      <description> 在开发Elastic-Job-Cloud作业时，开发人员可以脱离Mesos环境，在本地运行和调试作业。可以利用本地运行模式充分的调试业务功能以及单元测试，完成之后再部署至Mesos集群。
本地运行作业无需安装Mesos环境。
配置 使用org.apache.shardingsphere.elasticjob.cloud.executor.local.LocalCloudJobConfiguration配置本地作业。
LocalCloudJobConfiguration config = new LocalCloudJobConfiguration( new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(&amp;quot;FooJob&amp;quot;, &amp;quot;*/2 * * * * ?&amp;quot;, 3) //1 .shardingItemParameters(&amp;quot;0=Beijing,1=Shanghai,2=Guangzhou&amp;quot;) .jobParameter(&amp;quot;dbName=dangdang&amp;quot;).build(), &amp;quot;com.xxx.foo.FooJob&amp;quot;), 1, //2 &amp;quot;testSimpleJob&amp;quot; , &amp;quot;applicationContext.xml&amp;quot;); //3   配置作业类型和作业基本信息。 配置当前运行的作业是第几个分片。 配置Spring相关参数。  运行 使用org.apache.shardingsphere.elasticjob.cloud.executor.local.LocalTaskExecutor运行作业。
new LocalTaskExecutor(localJobConfig).execute();  </description>
    </item>
    
  </channel>
</rss>