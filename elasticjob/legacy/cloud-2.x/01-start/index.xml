<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01-starts on </title>
    <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/</link>
    <description>Recent content in 01-starts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Dec 2016 16:06:17 +0800</lastBuildDate>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>起航</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/</link>
      <pubDate>Fri, 02 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/</guid>
      <description> 本章导航  如果想快速体验Elastic-Job-Cloud的强大功能，请阅读快速入门。 如果在使用中遇到什么问题，请首先在FAQ中寻找解决问题的答案。 想要在自己的项目中集成Elastic-Job-Cloud,您一定很关心它如何开发及如何部署。  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/quick-start/</link>
      <pubDate>Thu, 06 Apr 2017 22:38:50 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/quick-start/</guid>
      <description>引入maven依赖 &amp;lt;!-- 引入elastic-job-cloud执行器模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.elasticjob&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-cloud-executor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  作业开发 public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  Java启动方式 需定义Main方法并调用JobBootstrap.execute()，例子如下：
public class JobDemo { public static void main(final String[] args) { JobBootstrap.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/faq/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/faq/</guid>
      <description> 1. 阅读源码时为什么会出现编译错误? 回答：
Elastic-Job使用lombok实现极简代码。关于更多使用和安装细节，请参考lombok官网。
2. Elastic-Job-Cloud有何使用限制? 回答：
 作业启动成功后修改作业名称视为新作业，原作业废弃。  3. 是否支持动态添加作业? 回答：
动态添加作业这个概念每个人理解不尽相同。
elastic-job-cloud为mesos框架，由mesos负责作业启动和分发。 但需要将作业打包上传，并调用elastic-job-cloud提供的REST API写入注册中心。 打包上传属于部署系统的范畴elastic-job-cloud并未涉及。
elastic-job已做了基本动态添加功能，但无法做到真正意义的完全自动化添加。
4. 使用Spring版本有何限制? 回答：
Elastic-Job的Spring版本支持从3.1.0.RELEASE至4的任何版本。Spring 5由于仅支持JDK 8及其以上版本，因此目前并不支持。Spring 3.1.0之前的版本对占位符的使用与目前不同，因此不再支持。Elastic-Job并未包含Spring的maven依赖，请自行添加您需要的版本。
5. Zookeeper版本不是3.4.6会有什么问题? 回答：
根据测试，使用3.3.6版本的Zookeeper在使用Curator 2.10.0的CuratorTransactionFinal的commit时会导致死锁。
6. Elastic-Job 2.0.5版本使用Cloud需要注意哪些问题? 回答：
对于Elastic Job Cloud，原作业维度配置无法满足易用性和扩展性等需求，因此在elastic-job 2.0.5Cloud版本中增加了作业APP的概念，即作业打包部署后的应用，描述了作业启动需要用到的CPU、内存、启动脚本及应用下载路径等基本信息，每个APP可以包含一个或多个作业。
７. 添加任务后为什么任务一直在ready状态，而不开始执行? 回答：
任务在mesos有单独的agent可提供所需的资源时才会启动，否则会等待直到有足够的资源。
增加JOB APP API
 将作业打包部署后发布作业APP。
 作业APP配置参数cpuCount,memoryMB分别代表应用启动时需要用到的CPU及内存。
  调整JOB API
 新增作业时，必须先发布打包部署后的作业APP。
 作业配置参数cpuCount,memoryMB分别代表作业运行时需要用到的CPU及内存。
  </description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/dev-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/dev-guide/</guid>
      <description>0. 环境需求 Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见
Mesos 请使用Mesos 0.28.0及其以上版本。详情参见
1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: .</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/deploy-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/legacy/cloud-2.x/01-start/deploy-guide/</guid>
      <description> Scheduler部署步骤  启动Elastic-Job-Cloud-Scheduler和Mesos指定注册中心的Zookeeper。
 启动Mesos Master和Mesos Agent。
 解压elastic-job-cloud-scheduler-${version}.tar.gz。可通过源码mvn install编译获取。
 执行bin\start.sh脚本启动elastic-job-cloud-scheduler。
  作业部署步骤  确保Zookeeper, Mesos Master/Agent以及Elastic-Job-Cloud-Scheduler已启动。
 将打包之后的作业tar.gz文件放至网络可访问的位置，如：ftp或http。打包的tar.gz文件中Main方法需要调用Elastic-Job-Cloud提供的JobBootstrap.execute方法。
 使用curl命令调用REST API注册APP及作业，详情参见：RESTful API。
  附录  配置：修改conf\elastic-job-cloud-scheduler.properties文件。配置项说明如下：     属性名称 必填 默认值 描述     hostname 是  服务器真实的IP或hostname，不能是127.0.0.1或localhost   user 否  Mesos framework使用的用户名称   mesos_url 是 zk://127.0.0.1:2181/mesos Mesos所使用的Zookeeper地址   zk_servers 是 127.0.0.1:2181 Elastic-Job-Cloud所使用的Zookeeper地址   zk_namespace 否 elastic-job-cloud Elastic-Job-Cloud所使用的Zookeeper命名空间   zk_digest 否  Elastic-Job-Cloud所使用的Zookeeper登录凭证   http_port 是 8899 Restful API所使用的端口号   job_state_queue_size 是 10000 堆积作业最大值, 超过此阀值的堆积作业将直接丢弃。阀值过大可能会导致Zookeeper无响应，应根据实测情况调整   event_trace_rdb_driver 否  作业事件追踪数据库驱动   event_trace_rdb_url 否  作业事件追踪数据库URL   event_trace_rdb_username 否  作业事件追踪数据库用户名   event_trace_rdb_password 否  作业事件追踪数据库密码     停止：不提供停止脚本，可直接使用kill杀进程。  </description>
    </item>
    
  </channel>
</rss>